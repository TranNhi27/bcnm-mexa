{"version":3,"sources":["config.js","App.js","serviceWorker.js","index.js"],"names":["config","address","abi","module","exports","contract","web3","require","showErrorMessage","message","NotificationManager","error","showSuccessMessage","success","showInfoMessage","info","domainData","name","version","chainId","verifyingContract","domainType","type","metaTransactionType","App","useState","owner","setOwner","quote","setQuote","newQuote","setNewQuote","startApp","a","methods","getQuote","call","from","window","ethereum","selectedAddress","result","console","log","currentOwner","currentQuote","nonces","nonce","parseInt","dataToSign","JSON","stringify","types","EIP712Domain","MetaTransaction","domain","primaryType","currentProvider","sendAsync","jsonrpc","id","method","params","err","signature","substring","r","s","v","setQuoteMeta","send","on","hash","once","confirmationNumber","receipt","status","useEffect","biconomy","Biconomy","dappId","apiKey","Web3","onEvent","READY","enable","eth","Contract","ERROR","className","cite","size","border-radius","placeholder","onChange","event","target","value","onClick","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.7ebba2fc.chunk.js","sourcesContent":["let config = {};\nconfig.contract = {\n    address: \"0x948f39835345a2a2Ce19DB649907C02A9d3aAC35\",\n    abi: [\n        {\n            \"constant\": true,\n            \"inputs\": [],\n            \"name\": \"getQuote\",\n            \"outputs\": [\n                {\n                    \"internalType\": \"string\",\n                    \"name\": \"currentQuote\",\n                    \"type\": \"string\"\n                },\n                {\n                    \"internalType\": \"address\",\n                    \"name\": \"currentOwner\",\n                    \"type\": \"address\"\n                }\n            ],\n            \"payable\": false,\n            \"stateMutability\": \"view\",\n            \"type\": \"function\"\n        },\n        {\n            \"constant\": true,\n            \"inputs\": [\n                {\n                    \"internalType\": \"address\",\n                    \"name\": \"\",\n                    \"type\": \"address\"\n                }\n            ],\n            \"name\": \"nonces\",\n            \"outputs\": [\n                {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"\",\n                    \"type\": \"uint256\"\n                }\n            ],\n            \"payable\": false,\n            \"stateMutability\": \"view\",\n            \"type\": \"function\"\n        },\n        {\n            \"constant\": true,\n            \"inputs\": [],\n            \"name\": \"owner\",\n            \"outputs\": [\n                {\n                    \"internalType\": \"address\",\n                    \"name\": \"\",\n                    \"type\": \"address\"\n                }\n            ],\n            \"payable\": false,\n            \"stateMutability\": \"view\",\n            \"type\": \"function\"\n        },\n        {\n            \"constant\": true,\n            \"inputs\": [],\n            \"name\": \"quote\",\n            \"outputs\": [\n                {\n                    \"internalType\": \"string\",\n                    \"name\": \"\",\n                    \"type\": \"string\"\n                }\n            ],\n            \"payable\": false,\n            \"stateMutability\": \"view\",\n            \"type\": \"function\"\n        },\n        {\n            \"constant\": false,\n            \"inputs\": [\n                {\n                    \"internalType\": \"string\",\n                    \"name\": \"newQuote\",\n                    \"type\": \"string\"\n                }\n            ],\n            \"name\": \"setQuote\",\n            \"outputs\": [],\n            \"payable\": false,\n            \"stateMutability\": \"nonpayable\",\n            \"type\": \"function\"\n        },\n        {\n            \"constant\": false,\n            \"inputs\": [\n                {\n                    \"internalType\": \"address\",\n                    \"name\": \"userAddress\",\n                    \"type\": \"address\"\n                },\n                {\n                    \"internalType\": \"string\",\n                    \"name\": \"newQuote\",\n                    \"type\": \"string\"\n                },\n                {\n                    \"internalType\": \"bytes32\",\n                    \"name\": \"r\",\n                    \"type\": \"bytes32\"\n                },\n                {\n                    \"internalType\": \"bytes32\",\n                    \"name\": \"s\",\n                    \"type\": \"bytes32\"\n                },\n                {\n                    \"internalType\": \"uint8\",\n                    \"name\": \"v\",\n                    \"type\": \"uint8\"\n                }\n            ],\n            \"name\": \"setQuoteMeta\",\n            \"outputs\": [],\n            \"payable\": false,\n            \"stateMutability\": \"nonpayable\",\n            \"type\": \"function\"\n        }\n    ]\n}\n\n\nmodule.exports = { config }\n","import React, { useState, useEffect } from \"react\";\nimport './App.css';\nimport Web3 from 'web3'\nimport Biconomy from \"@biconomy/mexa\";\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nimport 'react-notifications/lib/notifications.css';\nconst { config } = require(\"./config\");\nconst showErrorMessage = message => {\n  NotificationManager.error(message, \"Error\", 5000);\n};\nconst showSuccessMessage = message => {\n  NotificationManager.success(message, \"Message\", 3000);\n};\n\nconst showInfoMessage = message => {\n  NotificationManager.info(message, \"Info\", 3000);\n};\n\nlet contract;\nlet domainData = {\n  name: \"Quote\",\n  version: \"1\",\n  chainId: \"80001\",  // Kovan\n  verifyingContract: config.contract.address\n};\nconst domainType = [\n  { name: \"name\", type: \"string\" },\n  { name: \"version\", type: \"string\" },\n  { name: \"chainId\", type: \"uint256\" },\n  { name: \"verifyingContract\", type: \"address\" }\n];\n\nconst metaTransactionType = [\n  { name: \"nonce\", type: \"uint256\" },\n  { name: \"from\", type: \"address\" }\n];\n\nlet web3;\n\nfunction App() {\n\n\n  const [owner, setOwner] = useState(\"Default Owner Address\");\n  const [quote, setQuote] = useState(\"This is a default quote\");\n  const [newQuote, setNewQuote] = useState(\"\");\n  useEffect(() => {\n\n\n    if (!window.ethereum) {\n      showErrorMessage(\"Metamask is required to use this DApp\")\n      return;\n    }\n\n    // NOTE: dappId is no longer needed in latest version of Biconomy SDK\n    const biconomy = new Biconomy(window.ethereum, { dappId: \"dd3713aa37fa4657996adc8ea1451769\", apiKey: \"0-kIG9Gj_.458de11b-c7b9-4a6d-9c54-634274a24325\" });\n    \t\n    web3 = new Web3(biconomy);\n\n    biconomy.onEvent(biconomy.READY, async () => {\n      // Initialize your dapp here like getting user accounts etc\n      await window.ethereum.enable();\n      contract = new web3.eth.Contract(config.contract.abi, config.contract.address);\n      startApp();\n    }).onEvent(biconomy.ERROR, (error, message) => {\n      // Handle error while initializing mexa\n      console.log(error)\n    });\n  }\n    , []);\n\n  const onQuoteChange = event => {\n    setNewQuote(event.target.value);\n  };\n\n  async function startApp() {\n    const result = await contract.methods.getQuote().call({ from: window.ethereum.selectedAddress });\n    console.log(\"workingggg\");\n\n    if (result.currentOwner !== \"0x0000000000000000000000000000000000000000\") {\n      setQuote(result.currentQuote)\n      setOwner(result.currentOwner)\n    }\n  }\n  async function onButtonClickMeta() {\n    \n    console.log(window.ethereum.selectedAddress)\n    setNewQuote(\"\");\n    console.log(contract)\n    let nonce = await contract.methods.nonces(window.ethereum.selectedAddress).call();\n    let message = {};\n    message.nonce = parseInt(nonce);\n    message.from = window.ethereum.selectedAddress;\n\n    const dataToSign = JSON.stringify({\n      types: {\n        EIP712Domain: domainType,\n        MetaTransaction: metaTransactionType\n      },\n      domain: domainData,\n      primaryType: \"MetaTransaction\",\n      message: message\n    });\n\n    window.web3.currentProvider.sendAsync(\n      {\n        jsonrpc: \"2.0\",\n        id: 999999999999,\n        method: \"eth_signTypedData_v4\",\n        params: [window.ethereum.selectedAddress, dataToSign]\n      },\n      async function (err, result) {\n        if (err) {\n          return console.error(err);\n        }\n        console.log(\"Signature result from wallet :\");\n        console.log(result);\n        if(result && result.result) {\n          const signature = result.result.substring(2);\n          const r = \"0x\" + signature.substring(0, 64);\n          const s = \"0x\" + signature.substring(64, 128);\n          const v = parseInt(signature.substring(128, 130), 16);\n          console.log(r, \"r\")\n          console.log(s, \"s\")\n          console.log(v, \"v\")\n          console.log(window.ethereum.address, \"userAddress\")\n          console.log(newQuote, \"newQuote\");\n  \n          const promiEvent = contract.methods\n            .setQuoteMeta(window.ethereum.selectedAddress, newQuote, r, s, v)\n            .send({\n              from: window.ethereum.selectedAddress\n            })\n          promiEvent.on(\"transactionHash\", (hash) => {\n            showInfoMessage(\"Transaction sent successfully. Check Console for Transaction hash\")\n            console.log(\"Transaction Hash is \", hash)\n          }).once(\"confirmation\", (confirmationNumber, receipt) => {\n            if (receipt.status) {\n              showSuccessMessage(\"Transaction processed successfully\")\n              startApp()\n            } else {\n              showErrorMessage(\"Transaction Failed\");\n            }\n            console.log(receipt)\n          })\n        } else {\n          showErrorMessage(\"Could not get user signature. Check console logs for error\");\n        }\n      }\n    );\n  }\n  return (\n    <div className=\"App\">\n      *Use this DApp only on Mumbai Network\n      <header className=\"App-header\">\n        <h1>Quotes</h1>\n        <section className=\"main\">\n          <div className=\"mb-wrap mb-style-2\">\n            <blockquote cite=\"http://www.gutenberg.org/ebboks/11\">\n              <h4>{quote} </h4>\n            </blockquote>\n          </div>\n\n          <div className=\"mb-attribution\">\n            <p className=\"mb-author\">- {owner}</p>\n          </div>\n        </section>\n        <section>\n          <div className=\"submit-container\">\n            <div className=\"submit-row\">\n              <input size=\"100\"\n                border-radius=\"15\"\n                type=\"text\"\n                placeholder=\"Enter your quote\"\n                onChange={onQuoteChange}\n                value={newQuote}\n              />\n              <button type=\"button\" className=\"button\" onClick={onButtonClickMeta}>Submit</button>\n            </div>\n          </div>\n        </section>\n      </header>\n      <NotificationContainer />\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}