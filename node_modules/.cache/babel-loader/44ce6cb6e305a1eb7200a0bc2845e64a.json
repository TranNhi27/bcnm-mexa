{"ast":null,"code":"import _regeneratorRuntime from\"/home/hayden/workplace/dapp-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/hayden/workplace/dapp-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/hayden/workplace/dapp-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import'./App.css';import Web3 from'web3';import Biconomy from\"@biconomy/mexa\";import{NotificationContainer,NotificationManager}from'react-notifications';import'react-notifications/lib/notifications.css';var _require=require(\"./config\"),config=_require.config;var showErrorMessage=function showErrorMessage(message){NotificationManager.error(message,\"Error\",5000);};var showSuccessMessage=function showSuccessMessage(message){NotificationManager.success(message,\"Message\",3000);};var showInfoMessage=function showInfoMessage(message){NotificationManager.info(message,\"Info\",3000);};var contract;var domainData={name:\"Quote\",version:\"1\",chainId:\"80001\",// Kovan\nverifyingContract:config.contract.address};var domainType=[{name:\"name\",type:\"string\"},{name:\"version\",type:\"string\"},{name:\"chainId\",type:\"uint256\"},{name:\"verifyingContract\",type:\"address\"}];var metaTransactionType=[{name:\"nonce\",type:\"uint256\"},{name:\"from\",type:\"address\"}];var web3;function App(){var _useState=useState(\"Default Owner Address\"),_useState2=_slicedToArray(_useState,2),owner=_useState2[0],setOwner=_useState2[1];var _useState3=useState(\"This is a default quote\"),_useState4=_slicedToArray(_useState3,2),quote=_useState4[0],setQuote=_useState4[1];var _useState5=useState(\"\"),_useState6=_slicedToArray(_useState5,2),newQuote=_useState6[0],setNewQuote=_useState6[1];useEffect(function(){if(!window.ethereum){showErrorMessage(\"Metamask is required to use this DApp\");return;}// NOTE: dappId is no longer needed in latest version of Biconomy SDK\nvar biconomy=new Biconomy(window.ethereum,{dappId:\"5e9a0fc5667350123f4de8fe\",apiKey:\"0-kIG9Gj_.458de11b-c7b9-4a6d-9c54-634274a24325\"});web3=new Web3(biconomy);biconomy.onEvent(biconomy.READY,/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:// Initialize your dapp here like getting user accounts etc\nconsole.log(\"workingggg\");_context.next=3;return window.ethereum.enable();case 3:contract=new web3.eth.Contract(config.contract.abi,config.contract.address);startApp();case 5:case\"end\":return _context.stop();}}},_callee);}))).onEvent(biconomy.ERROR,function(error,message){// Handle error while initializing mexa\nconsole.log(error);});},[]);var onQuoteChange=function onQuoteChange(event){setNewQuote(event.target.value);};function startApp(){return _startApp.apply(this,arguments);}function _startApp(){_startApp=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var result;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return contract.methods.getQuote().call({from:window.ethereum.selectedAddress});case 2:result=_context2.sent;if(result.currentOwner!==\"0x0000000000000000000000000000000000000000\"){setQuote(result.currentQuote);setOwner(result.currentOwner);}case 4:case\"end\":return _context2.stop();}}},_callee2);}));return _startApp.apply(this,arguments);}function onButtonClickMeta(){return _onButtonClickMeta.apply(this,arguments);}function _onButtonClickMeta(){_onButtonClickMeta=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var nonce,message,dataToSign;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:console.log(window.ethereum.selectedAddress);setNewQuote(\"\");console.log(contract);_context4.next=5;return contract.methods.nonces(window.ethereum.selectedAddress).call();case 5:nonce=_context4.sent;message={};message.nonce=parseInt(nonce);message.from=window.ethereum.selectedAddress;dataToSign=JSON.stringify({types:{EIP712Domain:domainType,MetaTransaction:metaTransactionType},domain:domainData,primaryType:\"MetaTransaction\",message:message});window.web3.currentProvider.sendAsync({jsonrpc:\"2.0\",id:999999999999,method:\"eth_signTypedData_v4\",params:[window.ethereum.selectedAddress,dataToSign]},/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(err,result){var signature,r,s,v,promiEvent;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:if(!err){_context3.next=2;break;}return _context3.abrupt(\"return\",console.error(err));case 2:console.log(\"Signature result from wallet :\");console.log(result);if(result&&result.result){signature=result.result.substring(2);r=\"0x\"+signature.substring(0,64);s=\"0x\"+signature.substring(64,128);v=parseInt(signature.substring(128,130),16);console.log(r,\"r\");console.log(s,\"s\");console.log(v,\"v\");console.log(window.ethereum.address,\"userAddress\");console.log(newQuote,\"newQuote\");promiEvent=contract.methods.setQuoteMeta(window.ethereum.selectedAddress,newQuote,r,s,v).send({from:window.ethereum.selectedAddress});promiEvent.on(\"transactionHash\",function(hash){showInfoMessage(\"Transaction sent successfully. Check Console for Transaction hash\");console.log(\"Transaction Hash is \",hash);}).once(\"confirmation\",function(confirmationNumber,receipt){if(receipt.status){showSuccessMessage(\"Transaction processed successfully\");startApp();}else{showErrorMessage(\"Transaction Failed\");}console.log(receipt);});}else{showErrorMessage(\"Could not get user signature. Check console logs for error\");}case 5:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x,_x2){return _ref2.apply(this,arguments);};}());case 11:case\"end\":return _context4.stop();}}},_callee4);}));return _onButtonClickMeta.apply(this,arguments);}return/*#__PURE__*/React.createElement(\"div\",{className:\"App\"},\"*Use this DApp only on Mumbai Network\",/*#__PURE__*/React.createElement(\"header\",{className:\"App-header\"},/*#__PURE__*/React.createElement(\"h1\",null,\"Quotes\"),/*#__PURE__*/React.createElement(\"section\",{className:\"main\"},/*#__PURE__*/React.createElement(\"div\",{className:\"mb-wrap mb-style-2\"},/*#__PURE__*/React.createElement(\"blockquote\",{cite:\"http://www.gutenberg.org/ebboks/11\"},/*#__PURE__*/React.createElement(\"h4\",null,quote,\" \"))),/*#__PURE__*/React.createElement(\"div\",{className:\"mb-attribution\"},/*#__PURE__*/React.createElement(\"p\",{className:\"mb-author\"},\"- \",owner))),/*#__PURE__*/React.createElement(\"section\",null,/*#__PURE__*/React.createElement(\"div\",{className:\"submit-container\"},/*#__PURE__*/React.createElement(\"div\",{className:\"submit-row\"},/*#__PURE__*/React.createElement(\"input\",{size:\"100\",\"border-radius\":\"15\",type:\"text\",placeholder:\"Enter your quote\",onChange:onQuoteChange,value:newQuote}),/*#__PURE__*/React.createElement(\"button\",{type:\"button\",className:\"button\",onClick:onButtonClickMeta},\"Submit\"))))),/*#__PURE__*/React.createElement(NotificationContainer,null));}export default App;","map":{"version":3,"sources":["/home/hayden/workplace/dapp-demo/src/App.js"],"names":["React","useState","useEffect","Web3","Biconomy","NotificationContainer","NotificationManager","require","config","showErrorMessage","message","error","showSuccessMessage","success","showInfoMessage","info","contract","domainData","name","version","chainId","verifyingContract","address","domainType","type","metaTransactionType","web3","App","owner","setOwner","quote","setQuote","newQuote","setNewQuote","window","ethereum","biconomy","dappId","apiKey","onEvent","READY","console","log","enable","eth","Contract","abi","startApp","ERROR","onQuoteChange","event","target","value","methods","getQuote","call","from","selectedAddress","result","currentOwner","currentQuote","onButtonClickMeta","nonces","nonce","parseInt","dataToSign","JSON","stringify","types","EIP712Domain","MetaTransaction","domain","primaryType","currentProvider","sendAsync","jsonrpc","id","method","params","err","signature","substring","r","s","v","promiEvent","setQuoteMeta","send","on","hash","once","confirmationNumber","receipt","status"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport './App.css';\nimport Web3 from 'web3'\nimport Biconomy from \"@biconomy/mexa\";\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nimport 'react-notifications/lib/notifications.css';\nconst { config } = require(\"./config\");\nconst showErrorMessage = message => {\n  NotificationManager.error(message, \"Error\", 5000);\n};\nconst showSuccessMessage = message => {\n  NotificationManager.success(message, \"Message\", 3000);\n};\n\nconst showInfoMessage = message => {\n  NotificationManager.info(message, \"Info\", 3000);\n};\n\nlet contract;\nlet domainData = {\n  name: \"Quote\",\n  version: \"1\",\n  chainId: \"80001\",  // Kovan\n  verifyingContract: config.contract.address\n};\nconst domainType = [\n  { name: \"name\", type: \"string\" },\n  { name: \"version\", type: \"string\" },\n  { name: \"chainId\", type: \"uint256\" },\n  { name: \"verifyingContract\", type: \"address\" }\n];\n\nconst metaTransactionType = [\n  { name: \"nonce\", type: \"uint256\" },\n  { name: \"from\", type: \"address\" }\n];\n\nlet web3;\n\nfunction App() {\n\n\n  const [owner, setOwner] = useState(\"Default Owner Address\");\n  const [quote, setQuote] = useState(\"This is a default quote\");\n  const [newQuote, setNewQuote] = useState(\"\");\n  useEffect(() => {\n\n\n    if (!window.ethereum) {\n      showErrorMessage(\"Metamask is required to use this DApp\")\n      return;\n    }\n\n    // NOTE: dappId is no longer needed in latest version of Biconomy SDK\n    const biconomy = new Biconomy(window.ethereum, { dappId: \"5e9a0fc5667350123f4de8fe\", apiKey: \"0-kIG9Gj_.458de11b-c7b9-4a6d-9c54-634274a24325\" });\n\n    web3 = new Web3(biconomy);\n\n    biconomy.onEvent(biconomy.READY, async () => {\n      // Initialize your dapp here like getting user accounts etc\n      console.log(\"workingggg\");\n      await window.ethereum.enable();\n      contract = new web3.eth.Contract(config.contract.abi, config.contract.address);\n      startApp();\n    }).onEvent(biconomy.ERROR, (error, message) => {\n      // Handle error while initializing mexa\n      console.log(error)\n    });\n  }\n    , []);\n\n  const onQuoteChange = event => {\n    setNewQuote(event.target.value);\n  };\n\n  async function startApp() {\n    const result = await contract.methods.getQuote().call({ from: window.ethereum.selectedAddress });\n    if (result.currentOwner !== \"0x0000000000000000000000000000000000000000\") {\n      setQuote(result.currentQuote)\n      setOwner(result.currentOwner)\n    }\n  }\n  async function onButtonClickMeta() {\n    \n    console.log(window.ethereum.selectedAddress)\n    setNewQuote(\"\");\n    console.log(contract)\n    let nonce = await contract.methods.nonces(window.ethereum.selectedAddress).call();\n    let message = {};\n    message.nonce = parseInt(nonce);\n    message.from = window.ethereum.selectedAddress;\n\n    const dataToSign = JSON.stringify({\n      types: {\n        EIP712Domain: domainType,\n        MetaTransaction: metaTransactionType\n      },\n      domain: domainData,\n      primaryType: \"MetaTransaction\",\n      message: message\n    });\n\n    window.web3.currentProvider.sendAsync(\n      {\n        jsonrpc: \"2.0\",\n        id: 999999999999,\n        method: \"eth_signTypedData_v4\",\n        params: [window.ethereum.selectedAddress, dataToSign]\n      },\n      async function (err, result) {\n        if (err) {\n          return console.error(err);\n        }\n        console.log(\"Signature result from wallet :\");\n        console.log(result);\n        if(result && result.result) {\n          const signature = result.result.substring(2);\n          const r = \"0x\" + signature.substring(0, 64);\n          const s = \"0x\" + signature.substring(64, 128);\n          const v = parseInt(signature.substring(128, 130), 16);\n          console.log(r, \"r\")\n          console.log(s, \"s\")\n          console.log(v, \"v\")\n          console.log(window.ethereum.address, \"userAddress\")\n          console.log(newQuote, \"newQuote\");\n  \n          const promiEvent = contract.methods\n            .setQuoteMeta(window.ethereum.selectedAddress, newQuote, r, s, v)\n            .send({\n              from: window.ethereum.selectedAddress\n            })\n          promiEvent.on(\"transactionHash\", (hash) => {\n            showInfoMessage(\"Transaction sent successfully. Check Console for Transaction hash\")\n            console.log(\"Transaction Hash is \", hash)\n          }).once(\"confirmation\", (confirmationNumber, receipt) => {\n            if (receipt.status) {\n              showSuccessMessage(\"Transaction processed successfully\")\n              startApp()\n            } else {\n              showErrorMessage(\"Transaction Failed\");\n            }\n            console.log(receipt)\n          })\n        } else {\n          showErrorMessage(\"Could not get user signature. Check console logs for error\");\n        }\n      }\n    );\n  }\n  return (\n    <div className=\"App\">\n      *Use this DApp only on Mumbai Network\n      <header className=\"App-header\">\n        <h1>Quotes</h1>\n        <section className=\"main\">\n          <div className=\"mb-wrap mb-style-2\">\n            <blockquote cite=\"http://www.gutenberg.org/ebboks/11\">\n              <h4>{quote} </h4>\n            </blockquote>\n          </div>\n\n          <div className=\"mb-attribution\">\n            <p className=\"mb-author\">- {owner}</p>\n          </div>\n        </section>\n        <section>\n          <div className=\"submit-container\">\n            <div className=\"submit-row\">\n              <input size=\"100\"\n                border-radius=\"15\"\n                type=\"text\"\n                placeholder=\"Enter your quote\"\n                onChange={onQuoteChange}\n                value={newQuote}\n              />\n              <button type=\"button\" className=\"button\" onClick={onButtonClickMeta}>Submit</button>\n            </div>\n          </div>\n        </section>\n      </header>\n      <NotificationContainer />\n    </div >\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}