{"ast":null,"code":"var _jsxFileName = \"/home/hayden/workplace/dapp-demo/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport './App.css';\nimport Web3 from 'web3';\nimport Biconomy from \"@biconomy/mexa\";\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nimport 'react-notifications/lib/notifications.css';\n\nconst {\n  config\n} = require(\"./config\");\n\nconst showErrorMessage = message => {\n  NotificationManager.error(message, \"Error\", 5000);\n};\n\nconst showSuccessMessage = message => {\n  NotificationManager.success(message, \"Message\", 3000);\n};\n\nconst showInfoMessage = message => {\n  NotificationManager.info(message, \"Info\", 3000);\n};\n\nlet contract;\nlet domainData = {\n  name: \"Quote\",\n  version: \"1\",\n  chainId: \"42\",\n  // Kovan\n  verifyingContract: config.contract.address\n};\nconst domainType = [{\n  name: \"name\",\n  type: \"string\"\n}, {\n  name: \"version\",\n  type: \"string\"\n}, {\n  name: \"chainId\",\n  type: \"uint256\"\n}, {\n  name: \"verifyingContract\",\n  type: \"address\"\n}];\nconst metaTransactionType = [{\n  name: \"nonce\",\n  type: \"uint256\"\n}, {\n  name: \"from\",\n  type: \"address\"\n}];\nlet web3;\n\nfunction App() {\n  const [owner, setOwner] = useState(\"Default Owner Address\");\n  const [quote, setQuote] = useState(\"This is a default quote\");\n  const [newQuote, setNewQuote] = useState(\"\");\n  useEffect(() => {\n    if (!window.ethereum) {\n      showErrorMessage(\"Metamask is required to use this DApp\");\n      return;\n    } // NOTE: dappId is no longer needed in latest version of Biconomy SDK\n\n\n    const biconomy = new Biconomy(window.ethereum, {\n      dappId: \"5e9a0fc5667350123f4de8fe\",\n      apiKey: \"q9oEztJM8.e8ed08a7-5b38-48e3-b4c0-f66e6b66f407\"\n    });\n    web3 = new Web3(biconomy);\n    biconomy.onEvent(biconomy.READY, async () => {\n      // Initialize your dapp here like getting user accounts etc\n      await window.ethereum.enable();\n      contract = new web3.eth.Contract(config.contract.abi, config.contract.address);\n      startApp();\n    }).onEvent(biconomy.ERROR, (error, message) => {\n      // Handle error while initializing mexa\n      console.log(error);\n    });\n  }, []);\n\n  const onQuoteChange = event => {\n    setNewQuote(event.target.value);\n  };\n\n  async function startApp() {\n    const result = await contract.methods.getQuote().call({\n      from: window.ethereum.selectedAddress\n    });\n\n    if (result.currentOwner !== \"0x0000000000000000000000000000000000000000\") {\n      setQuote(result.currentQuote);\n      setOwner(result.currentOwner);\n    }\n  }\n\n  async function onButtonClickMeta() {\n    console.log(window.ethereum.selectedAddress);\n    setNewQuote(\"\");\n    console.log(contract);\n    let nonce = await contract.methods.nonces(window.ethereum.selectedAddress).call();\n    let message = {};\n    message.nonce = parseInt(nonce);\n    message.from = window.ethereum.selectedAddress;\n    const dataToSign = JSON.stringify({\n      types: {\n        EIP712Domain: domainType,\n        MetaTransaction: metaTransactionType\n      },\n      domain: domainData,\n      primaryType: \"MetaTransaction\",\n      message: message\n    });\n    window.web3.currentProvider.sendAsync({\n      jsonrpc: \"2.0\",\n      id: 999999999999,\n      method: \"eth_signTypedData_v4\",\n      params: [window.ethereum.selectedAddress, dataToSign]\n    }, async function (err, result) {\n      if (err) {\n        return console.error(err);\n      }\n\n      console.log(\"Signature result from wallet :\");\n      console.log(result);\n\n      if (result && result.result) {\n        const signature = result.result.substring(2);\n        const r = \"0x\" + signature.substring(0, 64);\n        const s = \"0x\" + signature.substring(64, 128);\n        const v = parseInt(signature.substring(128, 130), 16);\n        console.log(r, \"r\");\n        console.log(s, \"s\");\n        console.log(v, \"v\");\n        console.log(window.ethereum.address, \"userAddress\");\n        const promiEvent = contract.methods.setQuoteMeta(window.ethereum.selectedAddress, newQuote, r, s, v).send({\n          from: window.ethereum.selectedAddress\n        });\n        promiEvent.on(\"transactionHash\", hash => {\n          showInfoMessage(\"Transaction sent successfully. Check Console for Transaction hash\");\n          console.log(\"Transaction Hash is \", hash);\n        }).once(\"confirmation\", (confirmationNumber, receipt) => {\n          if (receipt.status) {\n            showSuccessMessage(\"Transaction processed successfully\");\n            startApp();\n          } else {\n            showErrorMessage(\"Transaction Failed\");\n          }\n\n          console.log(receipt);\n        });\n      } else {\n        showErrorMessage(\"Could not get user signature. Check console logs for error\");\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 5\n    }\n  }, \"*Use this DApp only on Kovan Network\", /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 9\n    }\n  }, \"Quotes\"), /*#__PURE__*/React.createElement(\"section\", {\n    className: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-wrap mb-style-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"blockquote\", {\n    cite: \"http://www.gutenberg.org/ebboks/11\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 15\n    }\n  }, quote, \" \"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb-attribution\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"mb-author\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }, \"- \", owner))), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"submit-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"submit-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    size: \"100\",\n    \"border-radius\": \"15\",\n    type: \"text\",\n    placeholder: \"Enter your quote\",\n    onChange: onQuoteChange,\n    value: newQuote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: \"button\",\n    onClick: onButtonClickMeta,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 15\n    }\n  }, \"Submit\"))))), /*#__PURE__*/React.createElement(NotificationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/hayden/workplace/dapp-demo/src/App.js"],"names":["React","useState","useEffect","Web3","Biconomy","NotificationContainer","NotificationManager","config","require","showErrorMessage","message","error","showSuccessMessage","success","showInfoMessage","info","contract","domainData","name","version","chainId","verifyingContract","address","domainType","type","metaTransactionType","web3","App","owner","setOwner","quote","setQuote","newQuote","setNewQuote","window","ethereum","biconomy","dappId","apiKey","onEvent","READY","enable","eth","Contract","abi","startApp","ERROR","console","log","onQuoteChange","event","target","value","result","methods","getQuote","call","from","selectedAddress","currentOwner","currentQuote","onButtonClickMeta","nonce","nonces","parseInt","dataToSign","JSON","stringify","types","EIP712Domain","MetaTransaction","domain","primaryType","currentProvider","sendAsync","jsonrpc","id","method","params","err","signature","substring","r","s","v","promiEvent","setQuoteMeta","send","on","hash","once","confirmationNumber","receipt","status"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport './App.css';\nimport Web3 from 'web3'\nimport Biconomy from \"@biconomy/mexa\";\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\nimport 'react-notifications/lib/notifications.css';\nconst { config } = require(\"./config\");\nconst showErrorMessage = message => {\n  NotificationManager.error(message, \"Error\", 5000);\n};\nconst showSuccessMessage = message => {\n  NotificationManager.success(message, \"Message\", 3000);\n};\n\nconst showInfoMessage = message => {\n  NotificationManager.info(message, \"Info\", 3000);\n};\n\nlet contract;\nlet domainData = {\n  name: \"Quote\",\n  version: \"1\",\n  chainId: \"42\",  // Kovan\n  verifyingContract: config.contract.address\n};\nconst domainType = [\n  { name: \"name\", type: \"string\" },\n  { name: \"version\", type: \"string\" },\n  { name: \"chainId\", type: \"uint256\" },\n  { name: \"verifyingContract\", type: \"address\" }\n];\n\nconst metaTransactionType = [\n  { name: \"nonce\", type: \"uint256\" },\n  { name: \"from\", type: \"address\" }\n];\n\nlet web3;\n\nfunction App() {\n\n\n  const [owner, setOwner] = useState(\"Default Owner Address\");\n  const [quote, setQuote] = useState(\"This is a default quote\");\n  const [newQuote, setNewQuote] = useState(\"\");\n  useEffect(() => {\n\n\n    if (!window.ethereum) {\n      showErrorMessage(\"Metamask is required to use this DApp\")\n      return;\n    }\n\n    // NOTE: dappId is no longer needed in latest version of Biconomy SDK\n    const biconomy = new Biconomy(window.ethereum, { dappId: \"5e9a0fc5667350123f4de8fe\", apiKey: \"q9oEztJM8.e8ed08a7-5b38-48e3-b4c0-f66e6b66f407\" });\n\n    web3 = new Web3(biconomy);\n\n    biconomy.onEvent(biconomy.READY, async () => {\n      // Initialize your dapp here like getting user accounts etc\n\n      await window.ethereum.enable();\n      contract = new web3.eth.Contract(config.contract.abi, config.contract.address);\n      startApp();\n    }).onEvent(biconomy.ERROR, (error, message) => {\n      // Handle error while initializing mexa\n      console.log(error)\n    });\n  }\n    , []);\n\n  const onQuoteChange = event => {\n    setNewQuote(event.target.value);\n  };\n\n  async function startApp() {\n    const result = await contract.methods.getQuote().call({ from: window.ethereum.selectedAddress });\n    if (result.currentOwner !== \"0x0000000000000000000000000000000000000000\") {\n      setQuote(result.currentQuote)\n      setOwner(result.currentOwner)\n    }\n  }\n  async function onButtonClickMeta() {\n    console.log(window.ethereum.selectedAddress)\n    setNewQuote(\"\");\n    console.log(contract)\n    let nonce = await contract.methods.nonces(window.ethereum.selectedAddress).call();\n    let message = {};\n    message.nonce = parseInt(nonce);\n    message.from = window.ethereum.selectedAddress;\n\n    const dataToSign = JSON.stringify({\n      types: {\n        EIP712Domain: domainType,\n        MetaTransaction: metaTransactionType\n      },\n      domain: domainData,\n      primaryType: \"MetaTransaction\",\n      message: message\n    });\n\n    window.web3.currentProvider.sendAsync(\n      {\n        jsonrpc: \"2.0\",\n        id: 999999999999,\n        method: \"eth_signTypedData_v4\",\n        params: [window.ethereum.selectedAddress, dataToSign]\n      },\n      async function (err, result) {\n        if (err) {\n          return console.error(err);\n        }\n        console.log(\"Signature result from wallet :\");\n        console.log(result);\n        if(result && result.result) {\n          const signature = result.result.substring(2);\n          const r = \"0x\" + signature.substring(0, 64);\n          const s = \"0x\" + signature.substring(64, 128);\n          const v = parseInt(signature.substring(128, 130), 16);\n          console.log(r, \"r\")\n          console.log(s, \"s\")\n          console.log(v, \"v\")\n          console.log(window.ethereum.address, \"userAddress\")\n  \n          const promiEvent = contract.methods\n            .setQuoteMeta(window.ethereum.selectedAddress, newQuote, r, s, v)\n            .send({\n              from: window.ethereum.selectedAddress\n            })\n          promiEvent.on(\"transactionHash\", (hash) => {\n            showInfoMessage(\"Transaction sent successfully. Check Console for Transaction hash\")\n            console.log(\"Transaction Hash is \", hash)\n          }).once(\"confirmation\", (confirmationNumber, receipt) => {\n            if (receipt.status) {\n              showSuccessMessage(\"Transaction processed successfully\")\n              startApp()\n            } else {\n              showErrorMessage(\"Transaction Failed\");\n            }\n            console.log(receipt)\n          })\n        } else {\n          showErrorMessage(\"Could not get user signature. Check console logs for error\");\n        }\n      }\n    );\n  }\n  return (\n    <div className=\"App\">\n      *Use this DApp only on Kovan Network\n      <header className=\"App-header\">\n        <h1>Quotes</h1>\n        <section className=\"main\">\n          <div className=\"mb-wrap mb-style-2\">\n            <blockquote cite=\"http://www.gutenberg.org/ebboks/11\">\n              <h4>{quote} </h4>\n            </blockquote>\n          </div>\n\n          <div className=\"mb-attribution\">\n            <p className=\"mb-author\">- {owner}</p>\n          </div>\n        </section>\n        <section>\n          <div className=\"submit-container\">\n            <div className=\"submit-row\">\n              <input size=\"100\"\n                border-radius=\"15\"\n                type=\"text\"\n                placeholder=\"Enter your quote\"\n                onChange={onQuoteChange}\n                value={newQuote}\n              />\n              <button type=\"button\" className=\"button\" onClick={onButtonClickMeta}>Submit</button>\n            </div>\n          </div>\n        </section>\n      </header>\n      <NotificationContainer />\n    </div >\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}